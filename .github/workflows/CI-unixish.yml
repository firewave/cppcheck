# Syntax reference https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions
# Environment reference https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners
name: CI-unixish

on: [push, pull_request]

permissions:
  contents: read

jobs:
  build:

    strategy:
      matrix:
        os: [ubuntu-22.04]
      fail-fast: false # Prefer quick result

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.workflow }}-${{ github.job }}-${{ matrix.os }}

      - name: Install missing software on ubuntu
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install libxml2-utils

      # packages for strict cfg checks
      - name: Install missing software on ubuntu 22.04 (cfg)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get install libcairo2-dev libcurl4-openssl-dev liblua5.3-dev libssl-dev libsqlite3-dev libcppunit-dev libsigc++-2.0-dev libgtk-3-dev libboost-all-dev libwxgtk3.0-gtk3-dev xmlstarlet qtbase5-dev

      # coreutils contains "nproc"
      - name: Install missing software on macos
        if: contains(matrix.os, 'macos')
        run: |
          brew install coreutils python3

      - name: Install missing Python packages
        run: |
          python3 -m pip install pip --upgrade
          python3 -m pip install pytest

      - name: Build cppcheck
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          make -j$(nproc) HAVE_RULES=yes

      - name: Build test
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          make -j$(nproc) testrunner HAVE_RULES=yes

      - name: Run test
        run: |
          make -j$(nproc) check HAVE_RULES=yes

      # the script uses sed parameters not supported by MacOS
      - name: Run extra tests
        if: contains(matrix.os, 'ubuntu')
        run: |
          tools/generate_and_run_more_tests.sh

      # do not use pushd in this step since we go below the working directory
      - name: Run test/cli
        run: |
          cd test/cli
          python3 -m pytest test-*.py
          cd ../../..
          ln -s cppcheck 'cpp check'
          cd 'cpp check/test/cli'
          python3 -m pytest test-*.py

      # fails on macos since some includes (e.g. sys/epoll.h) are not available
      - name: Run cfg tests
        if: contains(matrix.os, 'ubuntu') && matrix.os != 'ubuntu-22.04'
        run: |
          make -j$(nproc) checkcfg

      - name: Run cfg tests (strict)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          make -j$(nproc) checkcfg
        env:
          STRICT: 1

      # it seems macos has no "wc" command
      - name: Run showtimetop5 tests
        if: contains(matrix.os, 'ubuntu')
        run: |
          ./tools/test_showtimetop5.sh

      - name: Run --dump test
        run: |
          ./cppcheck test/testpreprocessor.cpp --dump
          xmllint --noout test/testpreprocessor.cpp.dump

      - name: Validate
        run: |
          make -j$(nproc) checkCWEEntries validateXML

      # TODO: move to scriptcheck.yml so these are tested with all Python versions?
      - name: Test addons
        run: |
          ./cppcheck --addon=threadsafety addons/test/threadsafety
          ./cppcheck --addon=threadsafety --std=c++03 addons/test/threadsafety
          ./cppcheck --addon=misra --inline-suppr --enable=information --error-exitcode=1 addons/test/misra/misra-ctu-*-test.c
          pushd addons/test
          # We'll force C89 standard to enable an additional verification for
          # rules 5.4 and 5.5 which have standard-dependent options.
          ../../cppcheck --dump -DDUMMY --suppress=uninitvar --inline-suppr misra/misra-test.c --std=c89 --platform=unix64 
          python3 ../misra.py -verify misra/misra-test.c.dump
          # TODO: do we need to verify something here?
          ../../cppcheck --dump -DDUMMY --suppress=uninitvar --suppress=uninitStructMember --std=c89 misra/misra-test.h
          ../../cppcheck --dump misra/misra-test.cpp 
          python3 ../misra.py -verify misra/misra-test.cpp.dump
          python3 ../misra.py --rule-texts=misra/misra2012_rules_dummy_ascii.txt -verify misra/misra-test.cpp.dump
          python3 ../misra.py --rule-texts=misra/misra2012_rules_dummy_utf8.txt -verify misra/misra-test.cpp.dump
          python3 ../misra.py --rule-texts=misra/misra2012_rules_dummy_windows1250.txt -verify misra/misra-test.cpp.dump
          ../../cppcheck --addon=misra --platform=avr8 --error-exitcode=1 misra/misra-test-avr8.c
          ../../cppcheck --dump misc-test.cpp 
          python3 ../misc.py -verify misc-test.cpp.dump
          ../../cppcheck --dump naming_test.c 
          python3 ../naming.py --var='[a-z].*' --function='[a-z].*' naming_test.c.dump
          ../../cppcheck --dump naming_test.cpp 
          python3 ../naming.py --var='[a-z].*' --function='[a-z].*' naming_test.cpp.dump
          ../../cppcheck --dump namingng_test.c 
          python3 ../namingng.py --configfile ../naming.json --verify namingng_test.c.dump

      - name: Ensure misra addon does not crash
        if: contains(matrix.os, 'ubuntu')
        run: |
          ./cppcheck --addon=misra addons/test/misra/crash1.c | ( ! grep 'Bailing out from checking' )
